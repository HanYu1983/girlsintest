(defmacro ac; []
)
(defmacro abc [name]
  (let [abc 30] abc))
(macroexpand-all '(abc 30))
(macroexpand-1 '(abc 30))
(defmacro abc [name]
  `(let [abc name] abc))
(macroexpand-1 '(abc 30))
((abc 30))
(abc 30)
(defmacro abc [name]
  `(let [c name] c))
(abc 30)
(macroexpand-1 '(abc 100))
(defmacro abc [name]
  `(let ['c name] 'c))
(macroexpand-1 '(abc 100))
(abc 30)
(defmacro abc [name]
  `(let [~'c name] ~'c))
(abc 30)
(macroexpand-1 '(abc 100))
(defmacro abc [name]
  `(let [~'c ~name] ~'c))
(macroexpand-1 '(abc 100))
(abc 300)
(defmacro defview [viewname elemName OpenFn CloseFn [ctx key CreateModel] Body]
  `(defmethod app/CreateAppView ~viewname [~ctx ~key ~CreateModel]
      (let [~'CreateElem (fn [] (app/CreateElem (js/$ ~elemName) ~CreateModel nil))
            ~'view (app/CreateView ~'CreateElem ~OpenFn ~CloseFn)]
         (doto (.-elemPromise ~'view)
           (.done ~Body))
          view)))
(macroexpand-1 '(defview :Street "#root" app/OpenFn app/CloseFn [c k cm] (fn [elem])))
(defmacro defview [viewname elemName OpenFn CloseFn [ctx] Body]
  `(defmethod app/CreateAppView ~viewname [~ctx ~'key ~'CreateModel]
      (let [~'CreateElem #(core.app/CreateElem (js/$ ~elemName) ~'CreateModel nil)
            ~'view (core.app/CreateView ~'CreateElem ~OpenFn ~CloseFn)]
         (doto (.-elemPromise ~'view)
           (.done ~Body))
          ~'view)))
(macroexpand-1 '(defview :Street "#root" app/OpenFn app/CloseFn [c] (fn [elem])))

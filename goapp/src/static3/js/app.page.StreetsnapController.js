// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.app.page.StreetsnapController = (function(_super) {
    __extends(StreetsnapController, _super);

    function StreetsnapController() {
      return StreetsnapController.__super__.constructor.apply(this, arguments);
    }

    StreetsnapController.prototype.addListener = function() {
      StreetsnapController.__super__.addListener.call(this);
      this._view.event.on('onImgHistoryClick', (function(_this) {
        return function() {
          return _this.onImgHistoryClick.apply(_this, arguments);
        };
      })(this));
      this._view.event.on('onImgClick', (function(_this) {
        return function() {
          return _this.onImgClick.apply(_this, arguments);
        };
      })(this));
      this._view.event.on('onBtnMoreClick', (function(_this) {
        return function() {
          return _this.onBtnMoreClick.apply(_this, arguments);
        };
      })(this));
      return this._view.event.on('onBtnShareClick', (function(_this) {
        return function() {
          return _this.onBtnShareClick.apply(_this, arguments);
        };
      })(this));
    };

    StreetsnapController.prototype.removeListener = function() {
      StreetsnapController.__super__.removeListener.call(this);
      this._view.event.off('onImgHistoryClick');
      this._view.event.off('onImgClick');
      this._view.event.off('onBtnMoreClick');
      return this._view.event.off('onBtnShareClick');
    };

    StreetsnapController.prototype.onImgHistoryClick = function(evt, data) {
      return this.event.trigger(evt.type, data);
    };

    StreetsnapController.prototype.onImgClick = function(evt, data) {
      return this.event.trigger(evt.type, data);
    };

    StreetsnapController.prototype.onBtnMoreClick = function(evt) {
      return this.event.trigger(evt.type);
    };

    StreetsnapController.prototype.onBtnShareClick = function(evt, data) {
      return this.event.trigger(evt.type, data);
    };

    StreetsnapController.prototype.applyTemplate = function(_arg, callback) {
      var configPath, done, fetchAllModelKeyAndModelDetail, fetchJSON, fetchModelDetail, fetchModelList, fetchPackageConfig, key, modelType, serverImagePath;
      key = _arg[0], modelType = _arg[1];
      serverImagePath = function(path) {
        var filepath;
        filepath = app.tool.serverapi.filepath("http://" + window.location.host);
        return filepath(path);
      };
      fetchJSON = function(configPath) {
        var query;
        query = app.tool.serverapi.query("http://" + window.location.host);
        return query(app.tool.serverapi.ServeFile, {
          FilePath: configPath
        });
      };
      fetchPackageConfig = function(configPath) {
        return fetchJSON(configPath);
      };
      fetchModelDetail = function(config) {
        var path;
        path = "" + config.model + "/" + key + "/config.json";
        return fetchJSON(path);
      };
      fetchModelList = function(config) {
        var promise;
        promise = $.Deferred();
        fetchJSON(config.model).done(function(data) {
          var modelKey;
          if (data.Success) {
            return promise.resolve((function() {
              var _i, _len, _ref, _results;
              _ref = data.Info;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                modelKey = _ref[_i];
                if (modelKey !== 'config.json') {
                  _results.push(modelKey);
                }
              }
              return _results;
            })());
          } else {
            return promise.reject(data.Info);
          }
        }).fail(function(err) {
          return promise.reject(err);
        });
        return promise;
      };
      fetchAllModelKeyAndModelDetail = function(config) {
        return $.when(config, fetchModelDetail(config), fetchModelList(config));
      };
      done = function(config, detail, list) {
        var convertHeadDTO, convertImageId2DTO, dto, _i, _ref, _results;
        convertHeadDTO = function(key) {
          return {
            id: key,
            url: serverImagePath("" + config.model + "/" + key + "/image_1.jpg")
          };
        };
        convertImageId2DTO = function(ids) {
          var id, url, _i, _len, _ref, _results;
          _ref = (function() {
            var _j, _len, _results1;
            _results1 = [];
            for (_j = 0, _len = ids.length; _j < _len; _j++) {
              id = ids[_j];
              _results1.push(serverImagePath("" + config.model + "/" + key + "/image_" + id + ".jpg"));
            }
            return _results1;
          })();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            url = _ref[_i];
            _results.push({
              id: key,
              url: url
            });
          }
          return _results;
        };
        dto = {
          historyList: _.map(list, convertHeadDTO),
          name: detail.Caption,
          date: detail.Date,
          styleUrl: serverImagePath("" + config.model + "/" + detail.Key + "/image_1.jpg"),
          sideList: convertImageId2DTO([2, 3, 4]),
          bottomList: convertImageId2DTO((function() {
            _results = [];
            for (var _i = 5, _ref = detail.ImageCount; 5 <= _ref ? _i <= _ref : _i >= _ref; 5 <= _ref ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this)),
          modelDetail: detail.Description,
          talk: detail.Talk,
          protalk: detail.Comment,
          modelKey: detail.ModelKey,
          key: key
        };
        return callback(dto);
      };
      configPath = "package/config.json";
      return fetchPackageConfig(configPath).pipe(fetchAllModelKeyAndModelDetail).then(done, function(err) {
        return alert(err);
      });
    };

    return StreetsnapController;

  })(vic.mvc.Controller);

}).call(this);

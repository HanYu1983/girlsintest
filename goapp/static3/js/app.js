// Generated by CoffeeScript 1.8.0
(function() {
  var CloseablePageList, PageCelebrity, PageEvent, PageHome, PageModels, PageNews, PageStreetsnap, PageStreetsnapList;

  PageHome = 'home';

  PageCelebrity = 'celebrity';

  PageModels = 'models';

  PageEvent = 'event';

  PageStreetsnap = 'streetsnap';

  PageStreetsnapList = 'streetsnapList';

  PageNews = 'news';

  CloseablePageList = [PageHome, PageCelebrity, PageModels, PageEvent, PageStreetsnap, PageStreetsnapList, PageNews];

  window.app.Main = (function() {
    function Main() {
      var self;
      this.coll_tmpls = {
        home: $('#tmpl_home'),
        celebrity: $('#tmpl_celebrity'),
        models: $('#tmpl_models'),
        event: $('#tmpl_event'),
        streetsnap: $('#tmpl_streetsnap'),
        streetsnapList: $('#tmpl_streetsnap_list'),
        news: $('#tmpl_news'),
        header: $('#mc_header'),
        menubar: $('#mc_menubar')
      };
      this.coll_pages = {};
      this.mc_pageContainer = $('#mc_pageContainer');
      self = this;
      this.header = new window.app.header.Controller(new window.app.header.View($('#mc_header')));
      this.header.open();
      this.header.event.on('onHeaderBtnBackhomeClick', function() {
        return self.openPage(PageHome);
      });
      this.menubar = new window.app.menubar.Controller(new window.app.menubar.View($('#mc_menubar')));
      this.menubar.open();
      this.menubar.event.on('onMenubarBtnClick', function(e, id) {
        switch (id) {
          case 'btn_nav_celebrity':
            return self.openPage(PageCelebrity);
          case 'btn_nav_model':
            return self.openPage(PageModels);
          case 'btn_nav_event':
            return self.openPage(PageEvent);
          case 'btn_nav_streetSnap':
            return self.openPage(PageStreetsnap);
          case 'btn_nav_news':
            return self.openPage(PageNews);
        }
      });
      this.openPage(PageHome);
    }

    Main.prototype.openPage = function(name, model) {
      this.closeAllPage;
      return this.bindEvent(name, this.openPageController(name, model));
    };

    Main.prototype.bindEvent = function(name, controller) {};

    Main.prototype.closePage = function(name) {
      return this.unbindEvent(name, this.closePageController(name));
    };

    Main.prototype.unbindEvent = function(name, controller) {
      if (controller === void 0) {

      }
    };

    Main.prototype.openPageController = function(name, model) {
      var controller, elem, isControllerExist, self;
      self = this;
      elem = this.coll_tmpls[name].tmpl(model);
      elem.appendTo(this.mc_pageContainer);
      isControllerExist = window.app[name] !== void 0;
      if (isControllerExist) {
        controller = new window.app[name].Controller(new window.app[name].View(elem));
        controller.open();
        return this.collect_page[name] = controller;
      } else {
        return console.log('no controller ' + name);
      }
    };

    Main.prototype.closePageController = function(name) {
      var page;
      if (this.collect_page[name] === void 0) {
        return;
      }
      page = this.collect_page[name];
      this.mc_pageContainer.empty();
      this.collect_page[name].close();
      delete this.collect_page[name];
      return page;
    };

    Main.prototype.closeAllPage = function() {
      var page, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = CloseablePageList.length; _i < _len; _i++) {
        page = CloseablePageList[_i];
        _results.push(this.closePage(page));
      }
      return _results;
    };

    return Main;

  })();

  new window.app.Main();

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.app.page.StreetsnapListController = (function(_super) {
    __extends(StreetsnapListController, _super);

    function StreetsnapListController() {
      return StreetsnapListController.__super__.constructor.apply(this, arguments);
    }

    StreetsnapListController.prototype.applyTemplate = function(_arg, callback) {
      var fetchAllModel, fetchAllModelOnSuccess, fetchPhoto, fetchPhotoOnSuccess, fetched, findFormatedPhoto, formatPhoto, isBottomPhoto, isHeadPhoto, isSidePhoto, isStylePhoto, modelType, onError, query, repairBase64, searchKey;
      searchKey = _arg[0], modelType = _arg[1];
      modelType = modelType === "models" ? "m" : "s";
      isStylePhoto = function(photo) {
        return photo.Belong === -2;
      };
      isSidePhoto = function(photo) {
        return photo.Belong === -3;
      };
      isHeadPhoto = function(photo) {
        return photo.Belong === -1;
      };
      isBottomPhoto = function(photo) {
        return photo.Belong === 0;
      };
      repairBase64 = function(base64) {
        return base64.replace('\r', '').replace('\n', '');
      };
      formatPhoto = function(photo) {
        return app.tool.getFullBase64str(repairBase64(photo.Base64Str));
      };
      findFormatedPhoto = function(photoData, filterFn) {
        return _.map(_.filter(photoData, filterFn), formatPhoto);
      };
      fetchAllModelOnSuccess = new Rx.Subject;
      fetchPhotoOnSuccess = new Rx.Subject;
      onError = new Rx.Subject;
      query = app.tool.serverapi.query("http://" + window.location.host);
      fetchAllModel = function(searchKey) {
        var option;
        option = searchKey != null ? {
          Regexp: searchKey,
          ModelType: modelType
        } : {
          ModelType: modelType
        };
        return query(app.tool.serverapi.QueryStreetModel, option).done(function(data) {
          return fetchAllModelOnSuccess.onNext(data.Info);
        }).fail(function(err) {
          return onError.onNext(err);
        });
      };
      fetchPhoto = function(modelList) {
        return async.map(modelList, function(model, sink) {
          return query(app.tool.serverapi.QueryPhotoWithStreetModel, {
            StreetModelKey: model.Key
          }).done(function(data) {
            return sink(null, data.Info);
          }).fail(function(err) {
            return sink(err);
          });
        }, function(err, results) {
          if (err != null) {
            return onError.onNext(err);
          } else {
            return fetchPhotoOnSuccess.onNext(results);
          }
        });
      };
      fetchAllModelOnSuccess.subscribe(fetchPhoto);
      fetched = fetchAllModelOnSuccess.zip(fetchPhotoOnSuccess, function(model, photo) {
        return [model, photo];
      });
      fetched.subscribe(function(_arg1) {
        var dto, model, photo;
        model = _arg1[0], photo = _arg1[1];
        dto = {
          streetsnapList: _.map(_.zip(model, photo), function(_arg2) {
            var m, p;
            m = _arg2[0], p = _arg2[1];
            return {
              id: m.Key,
              name: m.Caption,
              date: app.tool.getFullDay(m.DateUnix),
              imgStylePath: findFormatedPhoto(p, isStylePhoto)[0],
              imgSideAPath: findFormatedPhoto(p, isSidePhoto)[0],
              imgSideBPath: findFormatedPhoto(p, isSidePhoto)[1],
              imgSideCPath: findFormatedPhoto(p, isSidePhoto)[2]
            };
          })
        };
        return callback(dto);
      });
      onError.subscribe(function(err) {
        return console.log(err);
      });
      if (searchKey != null) {
        return fetchAllModel(searchKey);
      } else {
        return fetchAllModel();
      }
    };

    StreetsnapListController.prototype.addListener = function() {
      StreetsnapListController.__super__.addListener.call(this);
      this._view.event.on('onBtnSearchClick', (function(_this) {
        return function(evt, params) {
          return _this.event.trigger(evt.type, params);
        };
      })(this));
      return this._view.event.on('onBtnModelClick', (function(_this) {
        return function(evt, params) {
          return _this.event.trigger(evt.type, params);
        };
      })(this));
    };

    StreetsnapListController.prototype.removeListener = function() {
      this._view.event.off('onBtnSearchClick');
      return this._view.event.off('onBtnModelClick');
    };

    return StreetsnapListController;

  })(vic.mvc.Controller);

}).call(this);

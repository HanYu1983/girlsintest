// Generated by CoffeeScript 1.8.0
(function() {
  var fetchAllModel, fetchAllModel2, fetchFile, fetchModelKeyList, fetchModelKeyList2, getAllModelBy, memorizeGetAllModel, pkg, serverImagePath, serverImagePath100;

  if (app.fn == null) {
    app.fn = {};
  }

  pkg = app.fn;


  /*
  serverImagePath = (path) ->
  	filepath = app.tool.serverapi.filepath "http://#{window.location.host}"
  	return filepath path
  			
  serverImagePath100 = (path) ->
  	filepath = app.tool.serverapi.filepathWithSize "http://#{window.location.host}", 100, 100
  	return filepath path
   */

  serverImagePath = function(path) {
    var host;
    host = "http://" + window.location.host;
    return "" + host + "/" + path;
  };

  serverImagePath100 = function(path) {
    var host;
    host = "http://" + window.location.host;
    return "" + host + "/" + path + "?Width=100&Height=100";
  };

  fetchFile = function(path) {
    var host;
    host = "http://" + window.location.host;
    console.log("" + host + "/" + path);
    return $.getJSON("" + host + "/" + path);
  };

  fetchModelKeyList = function(path) {
    var promise;
    promise = $.Deferred();
    fetchFile(path).done(function(data) {
      var modelKey;
      if (data.Success) {
        return promise.resolve((function() {
          var _i, _len, _ref, _results;
          _ref = data.Info;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            modelKey = _ref[_i];
            if (modelKey !== 'config.json') {
              _results.push(modelKey);
            }
          }
          return _results;
        })());
      } else {
        return promise.reject(data.Info);
      }
    }).fail(function(err) {
      return promise.reject(err);
    });
    return promise;
  };

  fetchAllModel = function(path) {
    return function(keys) {
      var key, promise;
      promise = $.Deferred();
      $.when.apply($, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          _results.push(fetchFile("" + path + "/" + key + "/config.json"));
        }
        return _results;
      })()).done(function() {
        var details;
        details = arguments;
        return promise.resolve(_.zip(keys, details));
      }).fail(function(err) {
        return promise.reject(err);
      });
      return promise;
    };
  };

  getAllModelBy = function(configPath) {
    return function(type) {
      var promise;
      promise = $.Deferred();
      fetchFile(configPath).done(function(config) {
        var pkgPath;
        pkgPath = config[type];
        return fetchModelKeyList2(pkgPath).pipe(fetchAllModel2(pkgPath)).done(function(ret) {
          return promise.resolve(config, ret);
        }).fail(function(err) {
          return promise.reject(err);
        });
      }).fail(function(err) {
        return promise.reject(err);
      });
      return promise;
    };
  };

  memorizeGetAllModel = function(cache, fn) {
    return function(configPath) {
      return function(type) {
        var cacheKey, promise;
        cacheKey = "" + configPath + "/" + type;
        promise = $.Deferred();
        if (cache[cacheKey] != null) {
          setTimeout(function() {
            return promise.resolve.apply(promise, cache[cacheKey]);
          }, 0);
        } else {
          getAllModelBy(configPath)(type).done(function() {
            cache[cacheKey] = arguments;
            return promise.resolve.apply(promise, arguments);
          }).fail(function(err) {
            return promise.reject(err);
          });
        }
        return promise;
      };
    };
  };

  pkg.fetchFile = fetchFile;

  pkg.getAllModelBy = getAllModelBy;

  pkg.serverImagePath = serverImagePath;

  pkg.serverImagePath100 = serverImagePath100;

  pkg.memorizeGetAllModel = memorizeGetAllModel;

  fetchModelKeyList2 = function(path) {
    var promise;
    promise = $.Deferred();
    fetchFile(path).done(function(data) {
      var modelKey;
      return promise.resolve((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          modelKey = data[_i];
          if (modelKey !== 'config.json') {
            _results.push(modelKey);
          }
        }
        return _results;
      })());
    }).fail(function(err) {
      return promise.reject(err);
    });
    return promise;
  };

  fetchAllModel2 = function(path) {
    return function(keys) {
      var key, promise;
      promise = $.Deferred();
      $.when.apply($, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          _results.push(fetchFile("" + path + "/" + key + "/config.json"));
        }
        return _results;
      })()).done(function() {
        var detail, details;
        if (keys.length === 1) {
          detail = arguments[0];
          return promise.resolve([[keys[0], detail]]);
        } else {
          details = _.map(arguments, function(_arg) {
            var detail, response, success;
            detail = _arg[0], success = _arg[1], response = _arg[2];
            return detail;
          });
          return promise.resolve(_.zip(keys, details));
        }
      }).fail(function(err) {
        return promise.reject(err);
      });
      return promise;
    };
  };

}).call(this);
